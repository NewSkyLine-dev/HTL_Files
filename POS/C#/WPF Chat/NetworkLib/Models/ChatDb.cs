// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class ChatDb : DataConnection
	{
		public ChatDb()
		{
			InitDataContext();
		}

		public ChatDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public ChatDb(DataOptions<ChatDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<ChatMessage> ChatMessages => this.GetTable<ChatMessage>();
		public ITable<ChatRoom>    ChatRooms    => this.GetTable<ChatRoom>();
		public ITable<RoomMember>  RoomMembers  => this.GetTable<RoomMember>();
		public ITable<User>        Users        => this.GetTable<User>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static ChatMessage? Find(this ITable<ChatMessage> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<ChatMessage?> FindAsync(this ITable<ChatMessage> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static ChatRoom? Find(this ITable<ChatRoom> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<ChatRoom?> FindAsync(this ITable<ChatRoom> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static RoomMember? Find(this ITable<RoomMember> table, long userId, long roomId)
		{
			return table.FirstOrDefault(e => e.UserId == userId && e.RoomId == roomId);
		}

		public static Task<RoomMember?> FindAsync(this ITable<RoomMember> table, long userId, long roomId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == userId && e.RoomId == roomId, cancellationToken);
		}

		public static User? Find(this ITable<User> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<User?> FindAsync(this ITable<User> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
